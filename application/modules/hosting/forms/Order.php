<?phpclass Hosting_Form_Order extends Zend_Form {    public function init() {        $this->setName('order');        $owners = new Hosting_Model_Customer();        $owners = $owners->pairOptions();        $plans = new Hosting_Model_Plan();        $plans = $plans->pairOptions();        $owner_id = $this->CreateElement('select', 'owner_id')                        ->setLabel('Owner')                        ->addMultiOptions($owners);        $plan_id = $this->CreateElement('select', 'plan_id')                        ->setLabel('Plan')                        ->addMultiOptions($plans);        $domain = $this->CreateElement('text', 'domain')                        ->setLabel('Domain')                        ->setRequired(false)                        ->addValidator('Hostname', false)                        ->setDescription('example: http://www.roshd.ir');        $tld = $this->CreateElement('select', 'tld')                        ->setLabel('TLD')                        ->addMultiOptions(array(                            '.ir' => '.ir'                            , '.com' => '.com'                            , '.net' => '.net'                            , '.org' => '.org'))                        ->setRequired(true)                        ->addValidator('NotEmpty')                        ->setDescription('Top Level Domain');        $ns1 = $this->CreateElement('text', 'ns1')                        ->setLabel('NS 1')                        ->setRequired(TRUE)                        ->setAttrib('class', 'ltr')                        ->addValidator('NotEmpty')                        ->addFilter('StringTrim')                        ->addFilter('StripTags')                        ->addValidator('Regex', false, array('/[a-zA-Z0-9_.-]$/'))                        ->setDescription('Accept Dot, Dash, Underline, Number and Alphabetic');        $ns2 = $this->CreateElement('text', 'ns2')                        ->setLabel('NS 2')                        ->setRequired(TRUE)                        ->setAttrib('class', 'ltr')                        ->addValidator('NotEmpty')                        ->addFilter('StringTrim')                        ->addFilter('StripTags')                        ->addValidator('Regex', false, array('/[a-zA-Z0-9_.-]$/'))                        ->setDescription('Accept Dot, Dash, Underline, Number and Alphabetic');        $ns3 = $this->CreateElement('text', 'ns3')                        ->setLabel('NS 3')                        ->setAttrib('class', 'ltr')                        ->addValidator('NotEmpty')                        ->addFilter('StringTrim')                        ->addFilter('StripTags')                        ->addValidator('Regex', false, array('/[a-zA-Z0-9_.-]$/'))                        ->setDescription('Accept Dot, Dash, Underline, Number and Alphabetic');        $ns4 = $this->CreateElement('text', 'ns4')                        ->setLabel('NS 4')                        ->setAttrib('class', 'ltr')                        ->addValidator('NotEmpty')                        ->addFilter('StringTrim')                        ->addFilter('StripTags')                        ->addValidator('Regex', false, array('/[a-zA-Z0-9_.-]$/'))                        ->setDescription('Accept Dot, Dash, Underline, Number and Alphabetic');        $register_date = $this->CreateElement('text', 'register_date')                        ->setLabel('Registration Date')                        ->setValue(gregoriantojd(date('n'), date('j'), date('Y')))                        ->setRequired(TRUE)                        ->addValidator('NotEmpty')                        ->addValidator('Digits');        $duration = $this->CreateElement('select', 'duration')                        ->setLabel('Duration')                        ->addMultiOptions(array(                            '1' => '1 month'                            , '2' => '2 month'                            , '3' => '3 month'                            , '6' => '6 month'                            , '12' => '1 year'                            , '24' => '2 year'                            , '36' => '3 year'))                        ->setRequired(true)                        ->addValidator('NotEmpty')                        ->setDescription('Top Level Domain');        $admin_panel_url = $this->CreateElement('text', 'admin_panel_url')                        ->setLabel('Admin Panel URL')                        ->setRequired(TRUE)                        ->setAttrib('class', 'ltr')                        ->addValidator('NotEmpty')                        ->addFilter('StringTrim')                        ->addFilter('StripTags');        $username = $this->CreateElement('text', 'username')                        ->setLabel('Username')                        ->setRequired(TRUE)                        ->setAttrib('class', 'ltr')                        ->addValidator('NotEmpty')                        ->addFilter('StringTrim')                        ->addFilter('StripTags');        $password = $this->CreateElement('text', 'password')                        ->setLabel('Password')                        ->setRequired(TRUE)                        ->setAttrib('class', 'ltr')                        ->addValidator('NotEmpty')                        ->addFilter('StringTrim')                        ->addFilter('StripTags');        $cost = $this->CreateElement('text', 'cost')                        ->setLabel('Cost')                        ->setValue(0)                        ->setRequired(true)                        ->setAttrib('class', 'ltr')                        ->addValidator('NotEmpty')                        ->addValidator('Digits')                        ->setDescription('Unit: Rial');        $submit = $this->CreateElement('submit', 'submit')                        ->setLabel('Submit');        $this->addElements(array($owner_id, $plan_id, $domain, $tld, $ns1, $ns2, $ns3, $ns4, $register_date, $duration, $admin_panel_url, $username, $password, $cost, $submit));    }}